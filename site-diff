#!/usr/bin/env node
// Core node modules.
var fs = require('fs'),
    exec = require('child_process').exec,
    os = require('os'),
    url = require('url');

// NPM Packages.
var program = require('commander'),
    phantom = require('phantom'),
    resemble = require('resemble');

program
  .version('1.0.0')
  .option('-d, --dimensions <size>', 'The dimensions to use for the viewport (default: 1920x1080) ')
  .option('-o, --output <output>', 'The directory to use to save the image files. (default: os.tmpdir())')
  .option('-p, --port <port>', 'The port to use for PhantomJS')
  .option('-t --timeForScreenshot <timeForScreenshot>', 'Tempo em milisegundos que a aplicação irá aguardar antes de tirar um screenshot. (default: 500)')
  .parse(process.argv);

// Check to make sure we have two paths as arguments and if not show help text and exit.
if (program.args.length !== 2) {
  console.error('Please specify two paths for comparision!');
  program.help();
  process.exit(1);
}

// Make sure the urls provided are valid.
var firstUrl = validateUrl(program.args[0]);
var secondUrl = validateUrl(program.args[1]);

// Make sure our output directory is writeable, or fail early.
var outputDirectory = program.output || os.tmpdir().substring(0, os.tmpdir().length - 1);
if (!fs.existsSync(outputDirectory)) {
  fs.mkdirSync(outputDirectory);
}

// We need to split the output dimensions by width and height.
var outputDimensions = program.dimensions || '1920x1080';
var timeForScreenshot = program.timeForScreenshot || 500;
var dimensions = outputDimensions.split('x');
var viewportWidth = dimensions[0];
var viewportHeight = dimensions[1];
var closed = false;

exec('which phantomjs', function(err, stdout) {
  if (err) {
    console.error("phantomjs doesn't appear to be available in your path. Please `brew install phantomjs` or the equivalent for your system.");
    process.exit(1);
  }

  // If we have two paths, and phantomjs good to go take some screenshots.
  var port = program.port || 12345;

  phantom.create('--web-security=no', '--ignore-ssl-errors=yes', { "port": port, onExit: diffImage }, function(browser) {

      console.log("Navegador PhantomJS iniciado.");

      browser.createPage(function(page) {
        screenshot(page, firstUrl, function() {
            close(browser);
        });
      });

      browser.createPage(function(page) {
        screenshot(page, secondUrl, function() {
            close(browser);
        });
      });
  });
});



function close(browser) {
    if(closed) {
        console.log("Navegador PhantomJS fechado.")
        browser.exit();
    } else {
        closed = true;
    }
}

function screenshot(page, url, callback) {

    page.set('viewportSize', { width: viewportWidth, height: viewportHeight });

    page.open(url, function(status) {
        if (status != "success") {
            console.error("A url [%s] retornou com o status [%s]. A aplicação irá sair!", url, status);
            process.exit(1);
        }

        console.log("Url [%s] carregada com sucesso.", url);

        var pathImage = outputDirectory + '/' + imageFileName(url, outputDimensions);

        setTimeout(function() {
            page.render(pathImage);

            console.log("Screenshot da página foi salva no caminho [%s].", pathImage);

            page.close();

            if(callback) callback();
        }, timeForScreenshot);

    });
}

function diffImage() {
    var pathImage1 = outputDirectory + '/' + imageFileName(firstUrl, outputDimensions);
    var pathImage2 = outputDirectory + '/' + imageFileName(secondUrl, outputDimensions);

    var diffImagePath = outputDirectory + '/' + outputDimensions + '_diff.png';

    resemble.resemble(pathImage1).compareTo(pathImage2).ignoreNothing().onComplete(function(data) {
        var diffImage = data.getImageDataUrl().replace(/^data:image\/png;base64,/,"");

        console.log("Diferença de %s%", data.misMatchPercentage);

        // Write the diff file to disk.
        fs.writeFile(diffImagePath, diffImage, 'base64', function(err) {
            if (err) throw err;
        });
    });
}

// Take a url input, normalize it to add http:// if it's missing, since it's needed by phantomjs.
function validateUrl(path) {
    if (url.parse(path).host === null) {
        // Try adding an 'http://' to the url to see if that works.
        if (url.parse('http://' + path).host !== null) {
            path = 'http://' + path;
        }
    }

    return path;
}

function imageFileName(fullUrl, dimensions) {
    var fileName = fullUrl.replace('http://', '');

    fileName = replaceAll(fileName, '/', '_');
    fileName = replaceAll(fileName, ':', '_');
    fileName = replaceAll(fileName, '\\.', '_');

    fileName = fileName + dimensions + '.png';

    return fileName;
}

function replaceAll(str, find, replace) {
  return str.replace(new RegExp(find, 'g'), replace);
}